import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:ionicons/ionicons.dart';
import '../constants/app_colors.dart';
import '../constants/app_constants.dart';
import '../models/routine_model.dart';
import '../widgets/custom_button.dart';

class CreateRoutineScreen extends StatefulWidget {
  const CreateRoutineScreen({super.key});

  @override
  State<CreateRoutineScreen> createState() => _CreateRoutineScreenState();
}

class _CreateRoutineScreenState extends State<CreateRoutineScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _cycleController = TextEditingController();
  final _contentController = TextEditingController();
  
  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _cycleController.dispose();
    _contentController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8.0),
              decoration: BoxDecoration(
                color: AppColors.primary.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: const Icon(
                Ionicons.add_circle_outline,
                color: AppColors.primary,
                size: 20,
              ),
            ),
            const SizedBox(width: 8),
            const Text(
              'Î£®Ìã¥ ÏÉùÏÑ±',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: AppColors.primary,
                fontSize: 20,
              ),
            ),
          ],
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        centerTitle: false,
        leading: IconButton(
          icon: const Icon(Ionicons.arrow_back, color: Colors.black),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        systemOverlayStyle: const SystemUiOverlayStyle(
          statusBarColor: Colors.white,
          statusBarIconBrightness: Brightness.dark,
          statusBarBrightness: Brightness.light,
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // ÌôòÏòÅ Î©îÏãúÏßÄ
              const Padding(
                padding: EdgeInsets.only(bottom: 20.0),
                child: Text(
                  'ÏÉàÎ°úÏö¥ Î£®Ìã¥ÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî! üéØ',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                ),
              ),
              
              // Î£®Ìã¥ Ï†ïÎ≥¥ ÏÑπÏÖò
              _buildSectionTitle('Î£®Ìã¥ Ï†ïÎ≥¥'),
              const SizedBox(height: 16),
              
              // Î£®Ìã¥ Ïù¥Î¶Ñ
              _buildTextField(
                controller: _nameController,
                label: 'Î£®Ìã¥ Ïù¥Î¶Ñ',
                hint: 'Î£®Ìã¥ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                icon: Icons.title,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Î£®Ìã¥ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
                  }
                  return null;
                },
              ),
              
              const SizedBox(height: 16),
              
              // Î£®Ìã¥ Ï£ºÍ∏∞
              _buildTextField(
                controller: _cycleController,
                label: 'Î£®Ìã¥ Ï£ºÍ∏∞ (Ïùº)',
                hint: 'Î™á ÏùºÎßàÎã§ Î∞òÎ≥µÌï†ÏßÄ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                icon: Icons.schedule,
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Î£®Ìã¥ Ï£ºÍ∏∞Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
                  }
                  final cycle = int.tryParse(value);
                  if (cycle == null || cycle <= 0) {
                    return 'Ïò¨Î∞îÎ•∏ Ï£ºÍ∏∞Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî (1Ïùº Ïù¥ÏÉÅ)';
                  }
                  return null;
                },
              ),
              
              const SizedBox(height: 16),
              
              // Î£®Ìã¥ ÎÇ¥Ïö©
              _buildTextField(
                controller: _contentController,
                label: 'Î£®Ìã¥ ÎÇ¥Ïö©',
                hint: 'Î£®Ìã¥Ïóê ÎåÄÌïú ÏÉÅÏÑ∏ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                icon: Icons.description,
                maxLines: 5,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Î£®Ìã¥ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
                  }
                  return null;
                },
              ),
              
              const SizedBox(height: 40),
              
              // Î£®Ìã¥ ÏÉùÏÑ± Î≤ÑÌäº
              Container(
                width: double.infinity,
                height: 56,
                decoration: BoxDecoration(
                  color: AppColors.primary,
                  borderRadius: BorderRadius.circular(12.0),
                  boxShadow: [
                    BoxShadow(
                      color: AppColors.primary.withValues(alpha: 0.3),
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _handleCreateRoutine,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.transparent,
                    shadowColor: Colors.transparent,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0),
                    ),
                  ),
                  child: _isLoading
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        )
                      : const Text(
                          'Î£®Ìã¥ ÏÉùÏÑ±',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                ),
              ),
              
              const SizedBox(height: 16),
              
              // Ï∑®ÏÜå Î≤ÑÌäº
              Container(
                width: double.infinity,
                height: 56,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12.0),
                  border: Border.all(color: Colors.grey[300]!),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withValues(alpha: 0.1),
                      blurRadius: 8,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.transparent,
                    shadowColor: Colors.transparent,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12.0),
                    ),
                  ),
                  child: const Text(
                    'Ï∑®ÏÜå',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Colors.grey,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: const TextStyle(
        fontSize: 18,
        fontWeight: FontWeight.bold,
        color: AppColors.textPrimary,
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    TextInputType? keyboardType,
    int maxLines = 1,
    String? Function(String?)? validator,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16.0),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12.0),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withValues(alpha: 0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextFormField(
        controller: controller,
        keyboardType: keyboardType,
        maxLines: maxLines,
        validator: validator,
        decoration: InputDecoration(
          labelText: label,
          hintText: hint,
          prefixIcon: Icon(icon, color: AppColors.primary),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: BorderSide.none,
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: BorderSide.none,
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: const BorderSide(color: AppColors.primary, width: 2),
          ),
          errorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: const BorderSide(color: AppColors.error),
          ),
          focusedErrorBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12.0),
            borderSide: const BorderSide(color: AppColors.error, width: 2),
          ),
          filled: true,
          fillColor: Colors.white,
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 16,
          ),
        ),
      ),
    );
  }

  void _handleCreateRoutine() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // RoutineModel ÏÉùÏÑ±
      final routine = RoutineModel(
        id: 0, // ÏÑúÎ≤ÑÏóêÏÑú ÏûêÎèô ÏÉùÏÑ±Îê† ID
        userId: 1, // ÏûÑÏãú ÏÇ¨Ïö©Ïûê ID (Ïã§Ï†úÎ°úÎäî Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê ID)
        name: _nameController.text.trim(),
        cycle: int.parse(_cycleController.text),
        content: _contentController.text.trim(),
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // TODO: API Ìò∏Ï∂úÎ°ú Î£®Ìã¥ ÏÉùÏÑ± Ï≤òÎ¶¨
      // await ApiService().post('/routines', routine.toJson());
      
      // ÏûÑÏãúÎ°ú Î£®Ìã¥ Í∞ùÏ≤¥Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÏÉùÏÑ± ÏãúÎÆ¨Î†àÏù¥ÏÖò
      routine.toString(); // Î≥ÄÏàò ÏÇ¨Ïö©ÏúºÎ°ú Í≤ΩÍ≥† Ï†úÍ±∞
      
      await Future.delayed(const Duration(seconds: 2)); // ÏûÑÏãú ÎîúÎ†àÏù¥

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Î£®Ìã¥Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!'),
            backgroundColor: AppColors.success,
          ),
        );
        
        // Î£®Ìã¥ Î™©Î°ù ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        Navigator.pop(context);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Î£®Ìã¥ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: $e'),
            backgroundColor: AppColors.error,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
}
